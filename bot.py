import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# Enable logging
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# Bot Token (Replace with your actual token)
BOT_TOKEN = "7782893047:AAHszTxJ4IE7lkidNBpVA3xI0hYDOv_ed4A"

# Cadets Data
CADETS = {
    "Mikasa Ackerman": "·¥á ü…™·¥õ·¥á s·¥Ñ·¥è·¥ú·¥õ, ·¥áx·¥Ñ·¥á·¥ò·¥õ…™·¥è…¥·¥Ä ü s·¥ã…™ ü üs, ·¥Ö·¥á·¥Ö…™·¥Ñ·¥Ä·¥õ·¥á·¥Ö ·¥õ·¥è ·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ…™…¥…¢ ·¥á Ä·¥á…¥.",
    "Armin Arlert": " ô Ä…™ ü ü…™·¥Ä…¥·¥õ ·¥õ·¥Ä·¥Ñ·¥õ…™·¥Ñ…™·¥Ä…¥, ·¥ús·¥ás …™…¥·¥õ·¥á ü ü…™…¢·¥á…¥·¥Ñ·¥á ·¥è·¥†·¥á Ä s·¥õ Ä·¥á…¥…¢·¥õ ú.",
    "Jean Kirstein": " Ä·¥á·¥Ä ü…™s·¥õ…™·¥Ñ  ü·¥á·¥Ä·¥Ö·¥á Ä, ·¥õ ú Ä…™·¥†·¥ás ·¥ú…¥·¥Ö·¥á Ä ·¥ò Ä·¥áss·¥ú Ä·¥á.",
    "Connie Springer": " ü·¥è è·¥Ä ü ·¥Ä…¥·¥Ö ·¥Ö·¥á·¥Ö…™·¥Ñ·¥Ä·¥õ·¥á·¥Ö,  Ä·¥á·¥ç·¥Ä…™…¥s ·¥è·¥ò·¥õ…™·¥ç…™s·¥õ…™·¥Ñ.",
    "Sasha Blouse": "·¥áx·¥Ñ·¥á ü ü·¥á…¥·¥õ ·¥ç·¥Ä Ä·¥ãs·¥ç·¥Ä…¥, ·¥Ñ·¥è·¥ú Ä·¥Ä…¢·¥á·¥è·¥ús ·¥Ä…¥·¥Ö ·¥Ñ·¥Ä Ä·¥á“ì Ä·¥á·¥á.",
    "Levi Ackerman": " ú…™s·¥õ·¥è Ä è's s·¥õ Ä·¥è…¥…¢·¥ás·¥õ s·¥Ñ·¥è·¥ú·¥õ, ·¥ú…¥ Ä…™·¥†·¥Ä ü·¥á·¥Ö …™…¥ ·¥Ñ·¥è·¥ç ô·¥Ä·¥õ."
}

# Start Command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("·¥†…™·¥á·¥° ·¥è·¥ú Ä ·¥Ñ·¥Ä·¥Ö·¥á·¥õs", callback_data="view_cadets")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "‚öîÔ∏è ·¥õ ú·¥á s·¥Ñ·¥è·¥ú·¥õ  Ä·¥á…¢…™·¥ç·¥á…¥·¥õ ‚öîÔ∏è\n\n"
        " Ä·¥á·¥†·¥è ü·¥ú·¥õ…™·¥è…¥  ô Ä·¥è·¥ú…¢ ú·¥õ  ô è ·¥õ ú·¥ès·¥á ·¥° ú·¥è ·¥Ö·¥Ä Ä·¥á ·¥õ·¥è “ì…™…¢ ú·¥õ.\n\n"
        "·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥Ñ·¥Ä·¥Ö·¥á·¥õs …™…¥ ·¥õ ú·¥á  ô·¥Ä·¥õ·¥õ ü·¥á “ì·¥è Ä  ú·¥ú·¥ç·¥Ä…¥…™·¥õ è!",
        reply_markup=reply_markup
    )

# View Cadets
async def view_cadets(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    buttons = []
    cadet_names = list(CADETS.keys())

    for i in range(0, len(cadet_names), 2):  # 2x3 Grid Layout
        row = [InlineKeyboardButton(cadet_names[i], callback_data=f"cadet_{cadet_names[i]}")]
        if i + 1 < len(cadet_names):
            row.append(InlineKeyboardButton(cadet_names[i + 1], callback_data=f"cadet_{cadet_names[i + 1]}"))
        buttons.append(row)

    buttons.append([InlineKeyboardButton("üîô  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è ·¥ç·¥Ä…™…¥ ·¥ç·¥á…¥·¥ú", callback_data="back_to_main")])

    reply_markup = InlineKeyboardMarkup(buttons)
    await query.edit_message_text("üîπ **S·¥Ñ·¥è·¥ú·¥õ R·¥á…¢…™·¥ç·¥á…¥·¥õ C·¥Ä·¥Ö·¥á·¥õs** üîπ", reply_markup=reply_markup)

# Cadet Details
async def cadet_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    cadet_name = query.data.replace("cadet_", "")
    info = CADETS.get(cadet_name, "N·¥è …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á.")

    buttons = [
        [InlineKeyboardButton("üîô  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è ·¥Ñ·¥Ä·¥Ö·¥á·¥õs", callback_data="view_cadets")]
    ]

    reply_markup = InlineKeyboardMarkup(buttons)
    await query.edit_message_text(f"**{cadet_name}**\n\n{info}", reply_markup=reply_markup)

# Back to Main Menu
async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("·¥†…™·¥á·¥° ·¥è·¥ú Ä ·¥Ñ·¥Ä·¥Ö·¥á·¥õs", callback_data="view_cadets")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "‚öîÔ∏è ·¥õ ú·¥á s·¥Ñ·¥è·¥ú·¥õ  Ä·¥á…¢…™·¥ç·¥á…¥·¥õ ‚öîÔ∏è\n\n"
        " Ä·¥á·¥†·¥è ü·¥ú·¥õ…™·¥è…¥  ô Ä·¥è·¥ú…¢ ú·¥õ  ô è ·¥õ ú·¥ès·¥á ·¥° ú·¥è ·¥Ö·¥Ä Ä·¥á ·¥õ·¥è “ì…™…¢ ú·¥õ.\n\n"
        "·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥Ñ·¥Ä·¥Ö·¥á·¥õs …™…¥ ·¥õ ú·¥á  ô·¥Ä·¥õ·¥õ ü·¥á “ì·¥è Ä  ú·¥ú·¥ç·¥Ä…¥…™·¥õ è!",
        reply_markup=reply_markup
    )

# Main Function
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(view_cadets, pattern="view_cadets"))
    app.add_handler(CallbackQueryHandler(cadet_details, pattern="cadet_"))
    app.add_handler(CallbackQueryHandler(back_to_main, pattern="back_to_main"))

    app.run_polling()

if __name__ == "__main__":
    main()
